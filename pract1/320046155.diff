diff --git a/src/main/java/mx/unam/ciencias/edd/Lista.java b/src/main/java/mx/unam/ciencias/edd/Lista.java
index c46daab..55cf9ff 100644
--- a/src/main/java/mx/unam/ciencias/edd/Lista.java
+++ b/src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -27,7 +27,7 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         private Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento; 
         }
     }
 
@@ -40,37 +40,49 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         private Iterador() {
-            // Aquí va su código.
+            this.start();
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return this.siguiente != null;
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            this.anterior = this.siguiente;
+            this.siguiente = this.siguiente.siguiente;
+            return this.anterior.elemento;
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return this.anterior != null;
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
+            if (!hasPrevious()) {
+                throw new NoSuchElementException();
+            }
+            this.siguiente = this.anterior;
+            this.anterior = this.anterior.anterior;
+            return this.siguiente.elemento;
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+            this.anterior = null;
+            this.siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            this.siguiente = null;
+            this.anterior = rabo;
         }
     }
 
@@ -87,7 +99,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return this.longitud;
     }
 
     /**
@@ -96,7 +108,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return getLongitud();
     }
 
     /**
@@ -105,7 +117,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return this.cabeza == null;
     }
 
     /**
@@ -117,7 +129,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        agregaFinal(elemento);
     }
 
     /**
@@ -128,7 +140,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        }
+        longitud++;
+        Nodo n = new Nodo(elemento);
+        if (this.esVacia() == true) {
+            this.cabeza = n;
+            this.rabo = n;
+        } else {
+            rabo.siguiente = n;
+            n.anterior = rabo;
+            rabo = n;
+        }
     }
 
     /**
@@ -139,7 +163,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        }
+        longitud++;
+        Nodo n = new Nodo(elemento);
+        if (this.esVacia()) {
+            this.cabeza = n;
+            this.rabo = n;
+        } else {
+            cabeza.anterior = n;
+            n.siguiente = cabeza;
+            cabeza = n;
+        }
     }
 
     /**
@@ -158,7 +194,37 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        } else if (i < 1) {
+            agregaInicio(elemento);
+        } else if (i >= this.longitud) {
+            agregaFinal(elemento);
+        } else {
+            longitud++;
+            Nodo n = new Nodo(elemento);
+            Nodo s = getNodo(i);
+            s.anterior.siguiente = n;
+            n.anterior = s.anterior;
+            n.siguiente = s;
+            s.anterior = n;
+        }
+    }
+
+    private Nodo getNodo(int i) {
+        Nodo r = this.cabeza;
+        int index = 0;
+        if (i < 1) {
+            return cabeza;
+        } else if (i >= longitud) {
+            return rabo;
+        } else {
+            while (index != i) {
+                r = r.siguiente;
+                index++;
+            }
+        }
+        return r;
     }
 
     /**
@@ -167,7 +233,36 @@ public class Lista<T> implements Coleccion<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        Nodo eliminado = buscar(elemento);
+        if (eliminado == null) {
+            return;
+        } else if (this.cabeza == this.rabo) {
+            this.cabeza = null;
+            this.rabo = null;
+            longitud--;
+        } else if (eliminado.equals(cabeza)) {
+            this.eliminaPrimero();
+        } else if (eliminado.equals(rabo)) {
+            this.eliminaUltimo();
+        } else {
+            eliminado.anterior.siguiente = eliminado.siguiente;
+            eliminado.siguiente.anterior = eliminado.anterior;
+            longitud--;
+        }
+    }
+
+    private Nodo buscar(T elemento) {
+        if (elemento == null) {
+            return null;
+        }
+        Nodo n = this.cabeza;
+        while (n != null) {
+            if (n.elemento.equals(elemento)) {
+                break;
+            }
+            n = n.siguiente;
+        }
+        return n;
     }
 
     /**
@@ -176,7 +271,22 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+        if (this.cabeza == null) {
+            throw new NoSuchElementException();
+        }
+        T eliminado = this.cabeza.elemento;
+        if (this.longitud == 1) {
+            this.cabeza = null;
+            this.rabo = null;
+            longitud = 0;
+
+        } else {
+            this.cabeza = this.cabeza.siguiente;
+            this.cabeza.anterior = null;
+            longitud--;
+
+        }
+        return eliminado;
     }
 
     /**
@@ -185,7 +295,20 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+        if (this.cabeza == null) {
+            throw new NoSuchElementException();
+        }
+        T eliminado = this.rabo.elemento;
+        if (this.longitud == 1) {
+            this.rabo = null;
+            this.cabeza = null;
+            longitud = 0;
+        } else {
+            this.rabo = this.rabo.anterior;
+            this.rabo.siguiente = null;
+            longitud--;
+        }
+        return eliminado;
     }
 
     /**
@@ -195,7 +318,12 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        Nodo n = buscar(elemento);
+        if (n == null) {
+            return false;
+        } else {
+            return true;
+        }
     }
 
     /**
@@ -203,7 +331,13 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+        Lista<T> reverse = new Lista<>();
+        Nodo r = this.cabeza;
+        while (r != null) {
+            reverse.agregaInicio(r.elemento);
+            r = r.siguiente;
+        }
+        return reverse;
     }
 
     /**
@@ -212,14 +346,25 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+        Lista<T> copy = new Lista<>();
+        if (this.cabeza == null) {
+            return copy;
+        }
+        Nodo n = this.cabeza;
+        while (n != null) {
+            copy.agregaFinal(n.elemento);
+            n = n.siguiente;
+        }
+        return copy;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        while (this.longitud != 0) {
+            eliminaUltimo();
+        }
     }
 
     /**
@@ -228,7 +373,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+        if (cabeza == null) {
+            throw new NoSuchElementException();
+        } else {
+            return cabeza.elemento;
+        }
     }
 
     /**
@@ -237,7 +386,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+        if (rabo == null) {
+            throw new NoSuchElementException();
+        } else {
+            return rabo.elemento;
+        }
     }
 
     /**
@@ -248,7 +401,19 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+        if (i < 0 || i >= this.longitud) {
+            throw new ExcepcionIndiceInvalido();
+        }
+        if (this.longitud == 1) {
+            return this.cabeza.elemento;
+        }
+        Nodo n = this.cabeza;
+        int index = 0;
+        while (index != i) {
+            n = n.siguiente;
+            index++;
+        }
+        return n.elemento;
     }
 
     /**
@@ -258,7 +423,16 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        int index = 0;
+        if (contiene(elemento) == false) {
+            return -1;
+        }
+        Nodo n = this.cabeza;
+        while (n.elemento != elemento) {
+            n = n.siguiente;
+            index++;
+        }
+        return index;
     }
 
     /**
@@ -266,7 +440,17 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String c = "[";
+        Nodo n = this.cabeza;
+        while (n != null) {
+            c = c + n.elemento;
+            n = n.siguiente;
+            if (n != null) {
+                c = c + ", ";
+            }
+        }
+        c = c + "]";
+        return c;
     }
 
     /**
@@ -279,7 +463,21 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+        boolean data = false;
+        if (lista.getElementos() == this.getElementos()) {
+            Nodo n1 = this.cabeza;
+            Nodo n2 = lista.cabeza;
+            while (n1 != null && n2 != null) {
+                if (!n1.elemento.equals(n2.elemento)) {
+                    return data;
+                }
+                n1 = n1.siguiente;
+                n2 = n2.siguiente;
+            }
+            return data = true;
+        } else {
+            return data;
+        }
     }
 
     /**
