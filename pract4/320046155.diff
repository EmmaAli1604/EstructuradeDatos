diff --git a/src/main/java/mx/unam/ciencias/edd/ArbolBinario.java b/src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
index 27f393c..819ee22 100644
--- a/src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
+++ b/src/main/java/mx/unam/ciencias/edd/ArbolBinario.java
@@ -29,7 +29,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @param elemento el elemento del vértice.
          */
         protected Vertice(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
 
         /**
@@ -38,7 +38,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayPadre() {
-            // Aquí va su código.
+            return this.padre != null;
         }
 
         /**
@@ -47,7 +47,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayIzquierdo() {
-            // Aquí va su código.
+            return this.izquierdo != null;
         }
 
         /**
@@ -56,7 +56,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          *         <code>false</code> en otro caso.
          */
         @Override public boolean hayDerecho() {
-            // Aquí va su código.
+            return this.derecho != null;
         }
 
         /**
@@ -65,7 +65,10 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene padre.
          */
         @Override public VerticeArbolBinario<T> padre() {
-            // Aquí va su código.
+            if (!hayPadre()) {
+                throw new NoSuchElementException();
+            }
+            return this.padre;
         }
 
         /**
@@ -74,7 +77,10 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene izquierdo.
          */
         @Override public VerticeArbolBinario<T> izquierdo() {
-            // Aquí va su código.
+            if (!hayIzquierdo()) {
+                throw new NoSuchElementException();
+            }
+            return this.izquierdo;
         }
 
         /**
@@ -83,7 +89,21 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @throws NoSuchElementException si el vértice no tiene derecho.
          */
         @Override public VerticeArbolBinario<T> derecho() {
-            // Aquí va su código.
+            if (!hayDerecho()) {
+                throw new NoSuchElementException();
+            }
+            return this.derecho;
+        }
+
+        private int auxaltura(Vertice v) {
+            if (!v.hayIzquierdo() && !v.hayDerecho())
+                return 0;
+            if (!v.hayDerecho() && v.hayIzquierdo())
+                return 1 + izquierdo.altura();
+            if (!v.hayIzquierdo() && v.hayDerecho())
+                return 1 + derecho.altura();
+            else
+                return 1 + Math.max(v.izquierdo.altura(), v.derecho.altura());
         }
 
         /**
@@ -91,7 +111,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return la altura del vértice.
          */
         @Override public int altura() {
-            // Aquí va su código.
+            return auxaltura(this);
         }
 
         /**
@@ -99,7 +119,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return la profundidad del vértice.
          */
         @Override public int profundidad() {
-            // Aquí va su código.
+            if (padre == null)
+                return 0;
+            return 1 + padre.profundidad();
         }
 
         /**
@@ -107,7 +129,16 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return el elemento al que apunta el vértice.
          */
         @Override public T get() {
-            // Aquí va su código.
+            return this.elemento;
+        }
+
+        private boolean equals(Vertice v1, Vertice v2) {
+            if (v1 == null && v2 == null)
+                return true;
+            else if (v1 == null || v2 == null)
+                return false;
+            return v1.elemento.equals(v2.elemento) && equals(v1.izquierdo, v2.izquierdo)
+                    && equals(v1.derecho, v2.derecho);
         }
 
         /**
@@ -124,7 +155,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
             if (objeto == null || getClass() != objeto.getClass())
                 return false;
             @SuppressWarnings("unchecked") Vertice vertice = (Vertice)objeto;
-            // Aquí va su código.
+            return equals(this, vertice);
         }
 
         /**
@@ -132,7 +163,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
          * @return una representación en cadena del vértice.
          */
         @Override public String toString() {
-            // Aquí va su código.
+            return this.elemento.toString();
         }
     }
 
@@ -153,7 +184,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *        binario.
      */
     public ArbolBinario(Coleccion<T> coleccion) {
-        // Aquí va su código.
+        for (T e : coleccion) {
+            this.agrega(e);
+        }
     }
 
     /**
@@ -166,7 +199,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return un nuevo vértice con el elemento recibido dentro del mismo.
      */
     protected Vertice nuevoVertice(T elemento) {
-        // Aquí va su código.
+        return new Vertice(elemento);
     }
 
     /**
@@ -175,7 +208,9 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return la altura del árbol.
      */
     public int altura() {
-        // Aquí va su código.
+        if (raiz == null)
+            return -1;
+        return this.raiz.altura();
     }
 
     /**
@@ -183,7 +218,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return el número de elementos en el árbol.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return this.elementos;
     }
 
     /**
@@ -193,7 +228,22 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        if (busca(elemento) == null)
+            return false;
+        else
+            return true;
+    }
+
+    private VerticeArbolBinario<T> auxbusca(Vertice v, T elemento) {
+        if (v == null)
+            return null;
+        else if (v.get().equals(elemento))
+            return v;
+        VerticeArbolBinario<T> vi = auxbusca(v.izquierdo, elemento);
+        if (vi == null)
+            return auxbusca(v.derecho, elemento);
+        else
+            return vi;
     }
 
     /**
@@ -204,7 +254,7 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         <code>null</code> en otro caso.
      */
     public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+        return auxbusca(this.raiz, elemento);
     }
 
     /**
@@ -213,7 +263,10 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @throws NoSuchElementException si el árbol es vacío.
      */
     public VerticeArbolBinario<T> raiz() {
-        // Aquí va su código.
+        if (raiz == null) {
+            throw new NoSuchElementException();
+        }
+        return raiz;
     }
 
     /**
@@ -222,14 +275,15 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return raiz == null;
     }
 
     /**
      * Limpia el árbol de elementos, dejándolo vacío.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        raiz = null;
+        elementos = 0;
     }
 
     /**
@@ -243,7 +297,49 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
             return false;
         @SuppressWarnings("unchecked")
             ArbolBinario<T> arbol = (ArbolBinario<T>)objeto;
-        // Aquí va su código.
+        if (raiz == null && arbol.raiz == null)
+            return true;
+        return this.raiz.equals(arbol.raiz);
+    }
+
+
+    private String dibujaEspacios(int l, boolean[] A) {
+        String s = "";
+        for (int i = 0; i <= l - 1; i++) {
+            if (A[i] == true)
+                s = s + "│  ";
+            else
+                s = s + "   ";
+        }
+        return s;
+    }
+
+    private String toString(Vertice v, int l, boolean[] A) {
+
+        String s = v.toString() + "\n";
+
+        A[l] = true;
+        if (v.hayIzquierdo() && v.hayDerecho()) {
+            s += dibujaEspacios(l, A);
+            s += "├─›";
+            s += toString(v.izquierdo, l + 1, A);
+            s += dibujaEspacios(l, A);
+            s += "└─»";
+            A[l] = false;
+            s = s + toString(v.derecho, l + 1, A);
+        } else if (v.hayIzquierdo()) {
+            s += dibujaEspacios(l, A);
+            s += "└─›";
+            A[l] = false;
+            s += toString(v.izquierdo, l + 1, A);
+        } else if (v.hayDerecho()) {
+            s += dibujaEspacios(l, A);
+            s += "└─»";
+            A[l] = false;
+            s += toString(v.derecho, l + 1, A);
+        }
+
+        return s;
     }
 
     /**
@@ -251,7 +347,12 @@ public abstract class ArbolBinario<T> implements Coleccion<T> {
      * @return una representación en cadena del árbol.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        if (raiz == null)
+            return "";
+        boolean[] arreglo = new boolean[altura() + 1];
+        for (int i = 0; i < this.altura() + 1; i++)
+            arreglo[i] = false;
+        return toString(this.raiz, 0, arreglo);
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/ArbolBinarioCompleto.java b/src/main/java/mx/unam/ciencias/edd/ArbolBinarioCompleto.java
index 651a4da..a86210c 100644
--- a/src/main/java/mx/unam/ciencias/edd/ArbolBinarioCompleto.java
+++ b/src/main/java/mx/unam/ciencias/edd/ArbolBinarioCompleto.java
@@ -18,17 +18,25 @@ public class ArbolBinarioCompleto<T> extends ArbolBinario<T> {
 
         /* Inicializa al iterador. */
         private Iterador() {
-            // Aquí va su código.
+            cola = new Cola<Vertice>();
+
+            if (raiz != null)
+                cola.mete(raiz);
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return !cola.esVacia();
         }
 
         /* Regresa el siguiente elemento en orden BFS. */
         @Override public T next() {
-            // Aquí va su código.
+            Vertice vertice = cola.saca();
+            if (vertice.hayIzquierdo())
+                cola.mete(vertice.izquierdo);
+            if (vertice.hayDerecho())
+                cola.mete(vertice.derecho);
+            return vertice.elemento;
         }
     }
 
@@ -56,7 +64,33 @@ public class ArbolBinarioCompleto<T> extends ArbolBinario<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Vertice vertice = new Vertice(elemento);
+        elementos++;
+        if (raiz == null) {
+            raiz = vertice;
+            return;
+        }
+        Cola<Vertice> cola = new Cola<>();
+        Vertice aux = this.raiz;
+        cola.mete(raiz);
+        while (!cola.esVacia()) {
+            aux = cola.saca();
+            if (!aux.hayIzquierdo() || !aux.hayDerecho()) {
+                if (!aux.hayIzquierdo()) {
+                    vertice.padre = aux;
+                    aux.izquierdo = vertice;
+                } else {
+                    vertice.padre = aux;
+                    aux.derecho = vertice;
+                }
+                break;
+            } else {
+                cola.mete(aux.izquierdo);
+                cola.mete(aux.derecho);
+            }
+        }
     }
 
     /**
@@ -66,7 +100,37 @@ public class ArbolBinarioCompleto<T> extends ArbolBinario<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        Cola<Vertice> cola = new Cola<>();
+        Vertice eliminar = vertice(busca(elemento));
+        if (eliminar == null) {
+            return;
+        }
+
+        elementos--;
+
+        if (elementos == 0) {
+            raiz = null;
+            return;
+        }
+
+        Vertice v = raiz;
+        cola.mete(raiz);
+        while (!cola.esVacia()) {
+            v = cola.saca();
+            if (v.hayIzquierdo()) {
+                cola.mete(v.izquierdo);
+            }
+            if (v.hayDerecho()) {
+                cola.mete(v.derecho);
+            }
+        }
+
+        eliminar.elemento = v.elemento;
+        if (v.padre.izquierdo == v) {
+            v.padre.izquierdo = null;
+        } else {
+            v.padre.derecho = null;
+        }
     }
 
     /**
@@ -75,7 +139,9 @@ public class ArbolBinarioCompleto<T> extends ArbolBinario<T> {
      * @return la altura del árbol.
      */
     @Override public int altura() {
-        // Aquí va su código.
+        if (elementos == 0)
+            return -1;
+        return (int) Math.floor(Math.log(elementos) / Math.log(2));
     }
 
     /**
@@ -84,7 +150,21 @@ public class ArbolBinarioCompleto<T> extends ArbolBinario<T> {
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void bfs(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        if (raiz == null)
+            return;
+        Cola<Vertice> tail = new Cola<>();
+        tail.mete(raiz);
+        Vertice v;
+        while (!tail.esVacia()) {
+            v = tail.saca();
+            accion.actua(v);
+            if (v.izquierdo != null) {
+                tail.mete(v.izquierdo);
+            }
+            if (v.derecho != null) {
+                tail.mete(v.derecho);
+            }
+        }
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java b/src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
index e8685fa..dbb8d60 100644
--- a/src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
+++ b/src/main/java/mx/unam/ciencias/edd/ArbolBinarioOrdenado.java
@@ -25,17 +25,35 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
 
         /* Inicializa al iterador. */
         private Iterador() {
-            // Aquí va su código.
+            pila = new Pila<Vertice>();
+            if (raiz == null)
+                return;
+
+            pila.mete(raiz);
+            Vertice vertice = raiz;
+
+            while ((vertice = vertice.izquierdo) != null)
+                pila.mete(vertice);
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return !pila.esVacia();
         }
 
         /* Regresa el siguiente elemento en orden DFS in-order. */
         @Override public T next() {
-            // Aquí va su código.
+            Vertice vertice = pila.saca();
+
+            if (vertice.derecho != null) {
+                Vertice verticeAux = vertice.derecho;
+                pila.mete(verticeAux);
+
+                while ((verticeAux = verticeAux.izquierdo) != null)
+                    pila.mete(verticeAux);
+            }
+
+            return vertice.elemento;
         }
     }
 
@@ -64,14 +82,50 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
         super(coleccion);
     }
 
+    private void agrega(Vertice verticeActual, Vertice verticeAgregar) {
+        if (verticeAgregar.elemento.compareTo(verticeActual.elemento) <= 0) {
+            if (verticeActual.izquierdo == null) {
+                verticeActual.izquierdo = verticeAgregar;
+                verticeAgregar.padre = verticeActual;
+                return;
+            } else {
+                agrega(verticeActual.izquierdo, verticeAgregar);
+            }
+        } else {
+            if (verticeActual.derecho == null) {
+                verticeActual.derecho = verticeAgregar;
+                verticeAgregar.padre = verticeActual;
+                return;
+            } else {
+                agrega(verticeActual.derecho, verticeAgregar);
+            }
+        }
+    }
+
     /**
      * Agrega un nuevo elemento al árbol. El árbol conserva su orden in-order.
      * @param elemento el elemento a agregar.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Vertice agregar = nuevoVertice(elemento);
+        elementos++;
+        if (raiz == null) {
+            raiz = agregar;
+        } else {
+            agrega(raiz, agregar);
+        }
+        ultimoAgregado = agregar;
     }
 
+
+    private Vertice maximoEnSubarbol(Vertice v) {
+        if (v.derecho == null)
+            return v;
+        return maximoEnSubarbol(v.derecho);
+    }
+    
     /**
      * Elimina un elemento. Si el elemento no está en el árbol, no hace nada; si
      * está varias veces, elimina el primero que encuentre (in-order). El árbol
@@ -79,7 +133,17 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        Vertice vertice = vertice(busca(elemento));
+
+        if (vertice == null)
+            return;
+
+        elementos--;
+
+        if (vertice.izquierdo != null && vertice.derecho != null)
+            vertice = intercambiaEliminable(vertice);
+
+        eliminaVertice(vertice);
     }
 
     /**
@@ -92,7 +156,12 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         de <code>null</code>.
      */
     protected Vertice intercambiaEliminable(Vertice vertice) {
-        // Aquí va su código.
+        Vertice maxizq = maximoEnSubarbol(vertice.izquierdo);
+        T maxelemento = maxizq.elemento;
+        maxizq.elemento = vertice.elemento;
+        vertice.elemento = maxelemento;
+
+        return maxizq;
     }
 
     /**
@@ -102,7 +171,32 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *                distinto de <code>null</code>.
      */
     protected void eliminaVertice(Vertice vertice) {
-        // Aquí va su código.
+        Vertice hijo;
+        if (vertice.izquierdo != null)
+            hijo = vertice.izquierdo;
+        else
+            hijo = vertice.derecho;
+
+        if (!vertice.hayPadre())
+            raiz = hijo;
+        else if (vertice.padre.izquierdo == vertice)
+            vertice.padre.izquierdo = hijo;
+        else
+            vertice.padre.derecho = hijo;
+
+        if (hijo != null)
+            hijo.padre = vertice.padre;
+    }
+
+    private VerticeArbolBinario<T> auxbusca(Vertice vertice, T elemento) {
+        if (vertice == null) {
+            return null;
+        }
+        if (elemento.equals(vertice.elemento))
+            return vertice;
+        if (elemento.compareTo(vertice.elemento) <= 0)
+            return auxbusca(vertice.izquierdo, elemento);
+        return auxbusca(vertice.derecho, elemento);
     }
 
     /**
@@ -113,7 +207,7 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      *         encuentra; <code>null</code> en otro caso.
      */
     @Override public VerticeArbolBinario<T> busca(T elemento) {
-        // Aquí va su código.
+        return auxbusca(raiz, elemento);
     }
 
     /**
@@ -137,7 +231,30 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param vertice el vértice sobre el que vamos a girar.
      */
     public void giraDerecha(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        Vertice q = vertice(vertice);
+
+        if (q.izquierdo == null || q == null)
+            return;
+
+        Vertice p = q.izquierdo;
+        p.padre = q.padre;
+
+        if (q.padre == null)
+            raiz = p;
+        else {
+            if (q.padre.izquierdo == q)
+                q.padre.izquierdo = p;
+            else
+                q.padre.derecho = p;
+        }
+
+        q.izquierdo = p.derecho;
+
+        if (q.izquierdo != null)
+            q.izquierdo.padre = q;
+
+        p.derecho = q;
+        q.padre = p;
     }
 
     /**
@@ -146,16 +263,56 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param vertice el vértice sobre el que vamos a girar.
      */
     public void giraIzquierda(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        Vertice p = vertice(vertice);
+
+        if (p.derecho == null || p == null)
+            return;
+
+        Vertice q = p.derecho;
+        q.padre = p.padre;
+
+        if (p.padre == null)
+            raiz = q;
+        else {
+            if (p.padre.derecho == p)
+                p.padre.derecho = q;
+            else
+                p.padre.izquierdo = q;
+        }
+
+        p.derecho = q.izquierdo;
+
+        if (p.derecho != null)
+            p.derecho.padre = p;
+        q.izquierdo = p;
+        p.padre = q;
+    }
+
+    private void dfsPreOrder(Vertice v, AccionVerticeArbolBinario<T> accion) {
+        if (v == null)
+            return;
+        accion.actua(v);
+        dfsPreOrder(v.izquierdo, accion);
+        dfsPreOrder(v.derecho, accion);
     }
 
+    
+
     /**
      * Realiza un recorrido DFS <em>pre-order</em> en el árbol, ejecutando la
      * acción recibida en cada elemento del árbol.
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPreOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsPreOrder(raiz, accion);
+    }
+
+    private void dfsInOrder(Vertice v, AccionVerticeArbolBinario<T> accion) {
+        if (v == null)
+            return;
+        dfsInOrder(v.izquierdo, accion);
+        accion.actua(v);
+        dfsInOrder(v.derecho, accion);
     }
 
     /**
@@ -164,16 +321,26 @@ public class ArbolBinarioOrdenado<T extends Comparable<T>>
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsInOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsInOrder(raiz, accion);
     }
 
+
+    private void dfsPostOrder(Vertice v, AccionVerticeArbolBinario<T> accion) {
+        if (v == null)
+            return;
+        dfsPostOrder(v.izquierdo, accion);
+        dfsPostOrder(v.derecho, accion);
+        accion.actua(v);
+    }
+
+
     /**
      * Realiza un recorrido DFS <em>post-order</em> en el árbol, ejecutando la
      * acción recibida en cada elemento del árbol.
      * @param accion la acción a realizar en cada elemento del árbol.
      */
     public void dfsPostOrder(AccionVerticeArbolBinario<T> accion) {
-        // Aquí va su código.
+        dfsPostOrder(raiz, accion);
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java b/src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java
index 7460ce2..443bdd0 100644
--- a/src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java
+++ b/src/main/java/mx/unam/ciencias/edd/ArbolRojinegro.java
@@ -31,7 +31,11 @@ public class ArbolRojinegro<T extends Comparable<T>>
          * @param elemento el elemento del vértice.
          */
         public VerticeRojinegro(T elemento) {
-            // Aquí va su código.
+            super(elemento);
+            if (elemento == null)
+                color = Color.NEGRO;
+            else
+                color = Color.ROJO;
         }
 
         /**
@@ -39,7 +43,7 @@ public class ArbolRojinegro<T extends Comparable<T>>
          * @return una representación en cadena del vértice rojinegro.
          */
         @Override public String toString() {
-            // Aquí va su código.
+            return String.format("%s{%s}", color == Color.NEGRO ? "N" : "R", elemento.toString());
         }
 
         /**
@@ -57,7 +61,7 @@ public class ArbolRojinegro<T extends Comparable<T>>
                 return false;
             @SuppressWarnings("unchecked")
                 VerticeRojinegro vertice = (VerticeRojinegro)objeto;
-            // Aquí va su código.
+            return (color == vertice.color) && super.equals(objeto);
         }
     }
 
@@ -84,7 +88,12 @@ public class ArbolRojinegro<T extends Comparable<T>>
      * @return un nuevo vértice rojinegro con el elemento recibido dentro del mismo.
      */
     @Override protected Vertice nuevoVertice(T elemento) {
-        // Aquí va su código.
+        return new VerticeRojinegro(elemento);
+    }
+
+    private VerticeRojinegro verticeRojinegro(VerticeArbolBinario<T> vertice){
+        VerticeRojinegro v = (VerticeRojinegro) vertice;
+        return v;
     }
 
     /**
@@ -95,7 +104,11 @@ public class ArbolRojinegro<T extends Comparable<T>>
      *         VerticeRojinegro}.
      */
     public Color getColor(VerticeArbolBinario<T> vertice) {
-        // Aquí va su código.
+        return verticeRojinegro(vertice).color;
+    }
+
+    private Color color(VerticeRojinegro vertice){
+        return vertice != null ? vertice.color : Color.NEGRO;
     }
 
     /**
@@ -105,7 +118,58 @@ public class ArbolRojinegro<T extends Comparable<T>>
      * @param elemento el elemento a agregar.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        super.agrega(elemento);
+        VerticeRojinegro last = verticeRojinegro(ultimoAgregado);
+        last.color = Color.ROJO;
+        rebalancearAdd(last);
+    }
+
+    private boolean verticesCruzadosIzq(VerticeRojinegro v) {
+        return v.padre.izquierdo == v;
+    }
+
+    private void rebalancearAdd(VerticeRojinegro vertice) {
+
+        if (!vertice.hayPadre()) {
+            vertice.color = Color.NEGRO;
+            return;
+        }
+
+        VerticeRojinegro p = verticeRojinegro(vertice.padre);
+
+        if (color(p) == Color.NEGRO)
+            return;
+
+        VerticeRojinegro a = verticeRojinegro(p.padre);
+        VerticeRojinegro t = verticeRojinegro((verticesCruzadosIzq(p) ? p.padre.derecho : p.padre.izquierdo));
+
+        if (color(t) == Color.ROJO) {
+            p.color = t.color = Color.NEGRO;
+            a.color = Color.ROJO;
+            rebalancearAdd(a);
+            return;
+        }
+
+        if (verticesCruzadosIzq(vertice) && !verticesCruzadosIzq(p)) {
+            super.giraDerecha(p);
+            VerticeRojinegro aux = vertice;
+            vertice = p;
+            p = aux;
+        } else if (verticesCruzadosIzq(p) && !verticesCruzadosIzq(vertice)) {
+            super.giraIzquierda(p);
+            VerticeRojinegro aux = vertice;
+            vertice = p;
+            p = aux;
+        }
+
+        p.color = Color.NEGRO;
+        a.color = Color.ROJO;
+
+        if (verticesCruzadosIzq(vertice)) {
+            super.giraDerecha(a);
+        } else {
+            super.giraIzquierda(a);
+        }
     }
 
     /**
@@ -115,7 +179,100 @@ public class ArbolRojinegro<T extends Comparable<T>>
      * @param elemento el elemento a eliminar del árbol.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        VerticeRojinegro vertice = verticeRojinegro(busca(elemento));
+
+        if(vertice == null)
+            return;
+        
+        elementos--;
+
+        if(vertice.hayDerecho() && vertice.hayIzquierdo()){
+            vertice = verticeRojinegro(intercambiaEliminable(vertice));
+        }
+
+        VerticeRojinegro hijo;
+        VerticeRojinegro fantasma=null;
+
+        if(!vertice.hayDerecho() && !vertice.hayIzquierdo()){
+            fantasma=verticeRojinegro(nuevoVertice(null));
+            fantasma.color=Color.NEGRO;
+            fantasma.padre = vertice;
+            vertice.izquierdo = fantasma;
+            hijo = fantasma;
+        }else{
+            hijo = verticeRojinegro(vertice.hayIzquierdo()? vertice.izquierdo : vertice.derecho); 
+        }
+
+        eliminaVertice(vertice);
+
+        if(color(hijo)==Color.ROJO || color(vertice)==Color.ROJO){
+            hijo.color=Color.NEGRO;
+        }else{
+            rebalancearDelete(hijo);
+        }
+        if(fantasma != null){
+            eliminaVertice(fantasma);
+        }
+    }
+
+    private void rebalancearDelete(VerticeRojinegro vertice){
+        if(!vertice.hayPadre()){
+            return;
+        }
+        VerticeRojinegro p = verticeRojinegro(vertice.padre);
+        VerticeRojinegro h = verticeRojinegro(verticesCruzadosIzq(vertice)? vertice.padre.derecho:vertice.padre.izquierdo);
+        if(color(h) == Color.ROJO){
+            p.color=Color.ROJO;
+            h.color= Color.NEGRO;
+            if(verticesCruzadosIzq(vertice)){
+                super.giraIzquierda(p);
+            }
+            else {
+                super.giraDerecha(p);
+            }
+            p=verticeRojinegro(vertice.padre);
+            h = verticeRojinegro(verticesCruzadosIzq(vertice)? vertice.padre.derecho:vertice.padre.izquierdo);
+            
+        }
+        VerticeRojinegro hder=verticeRojinegro(h.derecho);
+        VerticeRojinegro hizq=verticeRojinegro(h.izquierdo);
+        if(color(p)==Color.NEGRO && color(h)==Color.NEGRO && color(hder)==Color.NEGRO && color(hizq)==Color.NEGRO){
+            h.color=Color.ROJO;
+            rebalancearDelete(p);
+            return;
+        }
+        if(color(p)==Color.ROJO && color(h)==Color.NEGRO && color(hder)==Color.NEGRO && color(hizq)==Color.NEGRO){
+            h.color=Color.ROJO;
+            p.color=Color.NEGRO;
+            return;
+        } 
+        if((verticesCruzadosIzq(vertice) && color(hizq) == Color.ROJO && color(hder)==Color.NEGRO)||(!verticesCruzadosIzq(vertice) && color(hizq) == Color.NEGRO && color(hder)==Color.ROJO)){
+            h.color=Color.ROJO;
+            if(color(hizq)==Color.ROJO)
+                hizq.color=Color.NEGRO;
+            if(color(hder)==Color.ROJO)
+                hder.color=Color.NEGRO;
+            
+            if(verticesCruzadosIzq(vertice))
+                super.giraDerecha(h);
+            else
+                super.giraIzquierda(h);
+            h = verticeRojinegro(verticesCruzadosIzq(vertice)? vertice.padre.derecho:vertice.padre.izquierdo);
+            hder=verticeRojinegro(h.derecho);
+            hizq=verticeRojinegro(h.izquierdo);
+        }
+        
+        h.color = p.color;
+        p.color=Color.NEGRO;
+        if(verticesCruzadosIzq(vertice)){
+            hder.color=Color.NEGRO;
+            super.giraIzquierda(p);
+            return;
+        }else{
+            hizq.color=Color.NEGRO;
+            super.giraDerecha(p);
+            return;
+        }
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/Arreglos.java b/src/main/java/mx/unam/ciencias/edd/Arreglos.java
index 641317c..ffeb357 100644
--- a/src/main/java/mx/unam/ciencias/edd/Arreglos.java
+++ b/src/main/java/mx/unam/ciencias/edd/Arreglos.java
@@ -10,6 +10,36 @@ public class Arreglos {
     /* Constructor privado para evitar instanciación. */
     private Arreglos() {}
 
+    private static <T> void intercambia(T[] arreglo, int first, int second) {
+        T temp = arreglo[first];
+        arreglo[first] = arreglo[second];
+        arreglo[second] = temp;
+    }
+
+    // Metódo auxilia para implementar el QuickSort
+    private static <T> void quickSort(T[] arreglo, Comparator<T> comparador, int inicio, int fin) {
+        if (fin <= inicio)
+            return;
+        int i = inicio + 1;
+        int j = fin;
+        while (i < j) {
+            if (comparador.compare(arreglo[i], arreglo[inicio]) <= 0) {
+                i++;
+            } else if (comparador.compare(arreglo[j], arreglo[inicio]) > 0) {
+                j--;
+            } else if (comparador.compare(arreglo[i], arreglo[inicio]) > 0
+                    && comparador.compare(arreglo[j], arreglo[inicio]) <= 0) {
+                intercambia(arreglo, i++, j--);
+            }
+        }
+        if (comparador.compare(arreglo[i], arreglo[inicio]) > 0) {
+            i--;
+        }
+        intercambia(arreglo, inicio, i);
+        quickSort(arreglo, comparador, inicio, i - 1);
+        quickSort(arreglo, comparador, i + 1, fin);
+    }
+
     /**
      * Ordena el arreglo recibido usando QickSort.
      * @param <T> tipo del que puede ser el arreglo.
@@ -18,7 +48,9 @@ public class Arreglos {
      */
     public static <T> void
     quickSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+        if (arreglo.length > 0) {
+            quickSort(arreglo, comparador, 0, arreglo.length - 1);
+        }
     }
 
     /**
@@ -39,7 +71,14 @@ public class Arreglos {
      */
     public static <T> void
     selectionSort(T[] arreglo, Comparator<T> comparador) {
-        // Aquí va su código.
+        for (int i = 0; i < arreglo.length; i++) {
+            int m = i;
+            for (int j = i + 1; j < arreglo.length; j++) {
+                if (comparador.compare(arreglo[j], arreglo[m]) <= 0) {
+                    intercambia(arreglo, m, j);
+                }
+            }
+        }
     }
 
     /**
@@ -63,7 +102,14 @@ public class Arreglos {
      */
     public static <T> int
     busquedaBinaria(T[] arreglo, T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+        int IndexOfElement = -1;
+        for (int i = 0; i < arreglo.length; i++) {
+            if (comparador.compare(arreglo[i], elemento) == 0) {
+                IndexOfElement = i;
+                break;
+            }
+        }
+        return IndexOfElement;
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/Cola.java b/src/main/java/mx/unam/ciencias/edd/Cola.java
index 8ab59f9..b2043e5 100644
--- a/src/main/java/mx/unam/ciencias/edd/Cola.java
+++ b/src/main/java/mx/unam/ciencias/edd/Cola.java
@@ -10,7 +10,13 @@ public class Cola<T> extends MeteSaca<T> {
      * @return una representación en cadena de la cola.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String c = "";
+        Nodo n = this.cabeza;
+        while (n != null) {
+            c += String.valueOf(n.elemento) + ",";
+            n = n.siguiente;
+        }
+        return c;
     }
 
     /**
@@ -20,6 +26,14 @@ public class Cola<T> extends MeteSaca<T> {
      *         <code>null</code>.
      */
     @Override public void mete(T elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Nodo n = new Nodo(elemento);
+        if (rabo == null)
+            cabeza = rabo = n;
+        else {
+            rabo.siguiente = n;
+            rabo = n;
+        }
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/edd/Lista.java b/src/main/java/mx/unam/ciencias/edd/Lista.java
index ace1fe8..7327b63 100644
--- a/src/main/java/mx/unam/ciencias/edd/Lista.java
+++ b/src/main/java/mx/unam/ciencias/edd/Lista.java
@@ -28,7 +28,7 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nodo con un elemento. */
         private Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento; 
         }
     }
 
@@ -41,37 +41,49 @@ public class Lista<T> implements Coleccion<T> {
 
         /* Construye un nuevo iterador. */
         private Iterador() {
-            // Aquí va su código.
+            this.start();
         }
 
         /* Nos dice si hay un elemento siguiente. */
         @Override public boolean hasNext() {
-            // Aquí va su código.
+            return this.siguiente != null;
         }
 
         /* Nos da el elemento siguiente. */
         @Override public T next() {
-            // Aquí va su código.
+            if (!hasNext()) {
+                throw new NoSuchElementException();
+            }
+            this.anterior = this.siguiente;
+            this.siguiente = this.siguiente.siguiente;
+            return this.anterior.elemento;
         }
 
         /* Nos dice si hay un elemento anterior. */
         @Override public boolean hasPrevious() {
-            // Aquí va su código.
+            return this.anterior != null;
         }
 
         /* Nos da el elemento anterior. */
         @Override public T previous() {
-            // Aquí va su código.
+            if (!hasPrevious()) {
+                throw new NoSuchElementException();
+            }
+            this.siguiente = this.anterior;
+            this.anterior = this.anterior.anterior;
+            return this.siguiente.elemento;
         }
 
         /* Mueve el iterador al inicio de la lista. */
         @Override public void start() {
-            // Aquí va su código.
+            this.anterior = null;
+            this.siguiente = cabeza;
         }
 
         /* Mueve el iterador al final de la lista. */
         @Override public void end() {
-            // Aquí va su código.
+            this.siguiente = null;
+            this.anterior = rabo;
         }
     }
 
@@ -88,7 +100,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return la longitud de la lista, el número de elementos que contiene.
      */
     public int getLongitud() {
-        // Aquí va su código.
+        return this.longitud;
     }
 
     /**
@@ -97,7 +109,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return el número elementos en la lista.
      */
     @Override public int getElementos() {
-        // Aquí va su código.
+        return getLongitud();
     }
 
     /**
@@ -106,7 +118,7 @@ public class Lista<T> implements Coleccion<T> {
      *         otro caso.
      */
     @Override public boolean esVacia() {
-        // Aquí va su código.
+        return this.cabeza == null;
     }
 
     /**
@@ -118,7 +130,7 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     @Override public void agrega(T elemento) {
-        // Aquí va su código.
+        agregaFinal(elemento);
     }
 
     /**
@@ -129,7 +141,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaFinal(T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        }
+        longitud++;
+        Nodo n = new Nodo(elemento);
+        if (this.esVacia() == true) {
+            this.cabeza = n;
+            this.rabo = n;
+        } else {
+            rabo.siguiente = n;
+            n.anterior = rabo;
+            rabo = n;
+        }
     }
 
     /**
@@ -140,7 +164,19 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void agregaInicio(T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        }
+        longitud++;
+        Nodo n = new Nodo(elemento);
+        if (this.esVacia()) {
+            this.cabeza = n;
+            this.rabo = n;
+        } else {
+            cabeza.anterior = n;
+            n.siguiente = cabeza;
+            cabeza = n;
+        }
     }
 
     /**
@@ -159,7 +195,37 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>null</code>.
      */
     public void inserta(int i, T elemento) {
-        // Aquí va su código.
+        if (elemento == null) {
+            throw new IllegalArgumentException();
+        } else if (i < 1) {
+            agregaInicio(elemento);
+        } else if (i >= this.longitud) {
+            agregaFinal(elemento);
+        } else {
+            longitud++;
+            Nodo n = new Nodo(elemento);
+            Nodo s = getNodo(i);
+            s.anterior.siguiente = n;
+            n.anterior = s.anterior;
+            n.siguiente = s;
+            s.anterior = n;
+        }
+    }
+
+    private Nodo getNodo(int i) {
+        Nodo r = this.cabeza;
+        int index = 0;
+        if (i < 1) {
+            return cabeza;
+        } else if (i >= longitud) {
+            return rabo;
+        } else {
+            while (index != i) {
+                r = r.siguiente;
+                index++;
+            }
+        }
+        return r;
     }
 
     /**
@@ -168,7 +234,36 @@ public class Lista<T> implements Coleccion<T> {
      * @param elemento el elemento a eliminar.
      */
     @Override public void elimina(T elemento) {
-        // Aquí va su código.
+        Nodo eliminado = buscar(elemento);
+        if (eliminado == null) {
+            return;
+        } else if (this.cabeza == this.rabo) {
+            this.cabeza = null;
+            this.rabo = null;
+            longitud--;
+        } else if (eliminado.equals(cabeza)) {
+            this.eliminaPrimero();
+        } else if (eliminado.equals(rabo)) {
+            this.eliminaUltimo();
+        } else {
+            eliminado.anterior.siguiente = eliminado.siguiente;
+            eliminado.siguiente.anterior = eliminado.anterior;
+            longitud--;
+        }
+    }
+
+    private Nodo buscar(T elemento) {
+        if (elemento == null) {
+            return null;
+        }
+        Nodo n = this.cabeza;
+        while (n != null) {
+            if (n.elemento.equals(elemento)) {
+                break;
+            }
+            n = n.siguiente;
+        }
+        return n;
     }
 
     /**
@@ -177,7 +272,22 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaPrimero() {
-        // Aquí va su código.
+        if (this.cabeza == null) {
+            throw new NoSuchElementException();
+        }
+        T eliminado = this.cabeza.elemento;
+        if (this.longitud == 1) {
+            this.cabeza = null;
+            this.rabo = null;
+            longitud = 0;
+
+        } else {
+            this.cabeza = this.cabeza.siguiente;
+            this.cabeza.anterior = null;
+            longitud--;
+
+        }
+        return eliminado;
     }
 
     /**
@@ -186,7 +296,20 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T eliminaUltimo() {
-        // Aquí va su código.
+        if (this.cabeza == null) {
+            throw new NoSuchElementException();
+        }
+        T eliminado = this.rabo.elemento;
+        if (this.longitud == 1) {
+            this.rabo = null;
+            this.cabeza = null;
+            longitud = 0;
+        } else {
+            this.rabo = this.rabo.anterior;
+            this.rabo.siguiente = null;
+            longitud--;
+        }
+        return eliminado;
     }
 
     /**
@@ -196,7 +319,12 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     @Override public boolean contiene(T elemento) {
-        // Aquí va su código.
+        Nodo n = buscar(elemento);
+        if (n == null) {
+            return false;
+        } else {
+            return true;
+        }
     }
 
     /**
@@ -204,7 +332,13 @@ public class Lista<T> implements Coleccion<T> {
      * @return una nueva lista que es la reversa la que manda llamar el método.
      */
     public Lista<T> reversa() {
-        // Aquí va su código.
+        Lista<T> reverse = new Lista<>();
+        Nodo r = this.cabeza;
+        while (r != null) {
+            reverse.agregaInicio(r.elemento);
+            r = r.siguiente;
+        }
+        return reverse;
     }
 
     /**
@@ -213,14 +347,25 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copiad de la lista.
      */
     public Lista<T> copia() {
-        // Aquí va su código.
+        Lista<T> copy = new Lista<>();
+        if (this.cabeza == null) {
+            return copy;
+        }
+        Nodo n = this.cabeza;
+        while (n != null) {
+            copy.agregaFinal(n.elemento);
+            n = n.siguiente;
+        }
+        return copy;
     }
 
     /**
      * Limpia la lista de elementos, dejándola vacía.
      */
     @Override public void limpia() {
-        // Aquí va su código.
+        while (this.longitud != 0) {
+            eliminaUltimo();
+        }
     }
 
     /**
@@ -229,7 +374,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getPrimero() {
-        // Aquí va su código.
+        if (cabeza == null) {
+            throw new NoSuchElementException();
+        } else {
+            return cabeza.elemento;
+        }
     }
 
     /**
@@ -238,7 +387,11 @@ public class Lista<T> implements Coleccion<T> {
      * @throws NoSuchElementException si la lista es vacía.
      */
     public T getUltimo() {
-        // Aquí va su código.
+        if (rabo == null) {
+            throw new NoSuchElementException();
+        } else {
+            return rabo.elemento;
+        }
     }
 
     /**
@@ -249,7 +402,19 @@ public class Lista<T> implements Coleccion<T> {
      *         igual que el número de elementos en la lista.
      */
     public T get(int i) {
-        // Aquí va su código.
+        if (i < 0 || i >= this.longitud) {
+            throw new ExcepcionIndiceInvalido();
+        }
+        if (this.longitud == 1) {
+            return this.cabeza.elemento;
+        }
+        Nodo n = this.cabeza;
+        int index = 0;
+        while (index != i) {
+            n = n.siguiente;
+            index++;
+        }
+        return n.elemento;
     }
 
     /**
@@ -259,7 +424,16 @@ public class Lista<T> implements Coleccion<T> {
      *         no está contenido en la lista.
      */
     public int indiceDe(T elemento) {
-        // Aquí va su código.
+        int index = 0;
+        if (contiene(elemento) == false) {
+            return -1;
+        }
+        Nodo n = this.cabeza;
+        while (n.elemento != elemento) {
+            n = n.siguiente;
+            index++;
+        }
+        return index;
     }
 
     /**
@@ -267,7 +441,17 @@ public class Lista<T> implements Coleccion<T> {
      * @return una representación en cadena de la lista.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String c = "[";
+        Nodo n = this.cabeza;
+        while (n != null) {
+            c = c + n.elemento;
+            n = n.siguiente;
+            if (n != null) {
+                c = c + ", ";
+            }
+        }
+        c = c + "]";
+        return c;
     }
 
     /**
@@ -280,7 +464,21 @@ public class Lista<T> implements Coleccion<T> {
         if (objeto == null || getClass() != objeto.getClass())
             return false;
         @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
-        // Aquí va su código.
+        boolean data = false;
+        if (lista.getElementos() == this.getElementos()) {
+            Nodo n1 = this.cabeza;
+            Nodo n2 = lista.cabeza;
+            while (n1 != null && n2 != null) {
+                if (!n1.elemento.equals(n2.elemento)) {
+                    return data;
+                }
+                n1 = n1.siguiente;
+                n2 = n2.siguiente;
+            }
+            return data = true;
+        } else {
+            return data;
+        }
     }
 
     /**
@@ -299,6 +497,38 @@ public class Lista<T> implements Coleccion<T> {
         return new Iterador();
     }
 
+     // Metódo Auxiliar de MergeSort para mezclar
+     private Lista<T> mezclar(Lista<T> lista1, Lista<T> lista2, Comparator<T> comparador) {
+        Lista<T> lfinal = new Lista<T>();
+        while (!lista1.esVacia() && !lista2.esVacia()) {
+            if (comparador.compare(lista1.getPrimero(), lista2.getPrimero()) <= 0)
+                lfinal.agrega(lista1.eliminaPrimero());
+            else
+                lfinal.agrega(lista2.eliminaPrimero());
+        }
+        while (!lista1.esVacia())
+            lfinal.agrega(lista1.eliminaPrimero());
+        while (!lista2.esVacia())
+            lfinal.agrega(lista2.eliminaPrimero());
+        return lfinal;
+    }
+
+    // Metódo auxiliar para separar
+    private Lista<T> mergesort(Lista<T> lista, Comparator<T> comparador) {
+        int mitad = lista.getLongitud() / 2;
+        Lista<T> l1 = new Lista<T>();
+        Lista<T> l2 = new Lista<T>();
+        if (lista.getLongitud() < 2)
+            return lista;
+        while (mitad > 0) {
+            l1.agregaFinal(lista.getPrimero());
+            lista.eliminaPrimero();
+            mitad--;
+        }
+        l2 = lista.copia();
+        return mezclar(mergesort(l1, comparador), mergesort(l2, comparador), comparador);
+    }
+
     /**
      * Regresa una copia de la lista, pero ordenada. Para poder hacer el
      * ordenamiento, el método necesita una instancia de {@link Comparator} para
@@ -308,7 +538,7 @@ public class Lista<T> implements Coleccion<T> {
      * @return una copia de la lista, pero ordenada.
      */
     public Lista<T> mergeSort(Comparator<T> comparador) {
-        // Aquí va su código.
+        return mergesort(this.copia(), comparador);
     }
 
     /**
@@ -333,7 +563,13 @@ public class Lista<T> implements Coleccion<T> {
      *         <code>false</code> en otro caso.
      */
     public boolean busquedaLineal(T elemento, Comparator<T> comparador) {
-        // Aquí va su código.
+        Lista<T>.Nodo n = this.cabeza;
+        while (n != null) {
+            if (n.elemento.equals(elemento))
+                return true;
+            n = n.siguiente;
+        }
+        return false;
     }
 
     /**
diff --git a/src/main/java/mx/unam/ciencias/edd/MeteSaca.java b/src/main/java/mx/unam/ciencias/edd/MeteSaca.java
index 8864077..59d33d0 100644
--- a/src/main/java/mx/unam/ciencias/edd/MeteSaca.java
+++ b/src/main/java/mx/unam/ciencias/edd/MeteSaca.java
@@ -22,7 +22,7 @@ public abstract class MeteSaca<T> {
          * @param elemento el elemento del nodo.
          */
         public Nodo(T elemento) {
-            // Aquí va su código.
+            this.elemento = elemento;
         }
     }
 
@@ -43,7 +43,15 @@ public abstract class MeteSaca<T> {
      * @throws NoSuchElementException si la estructura está vacía.
      */
     public T saca() {
-        // Aquí va su código.
+        if (cabeza == null) {
+            throw new NoSuchElementException();
+        }
+        T elemento = cabeza.elemento;
+        cabeza = cabeza.siguiente;
+        if (cabeza == null) {
+            rabo = null;
+        }
+        return elemento;
     }
 
     /**
@@ -53,7 +61,9 @@ public abstract class MeteSaca<T> {
      * @throws NoSuchElementException si la estructura está vacía.
      */
     public T mira() {
-        // Aquí va su código.
+        if (this.cabeza == null)
+            throw new NoSuchElementException();
+        return this.cabeza.elemento;
     }
 
     /**
@@ -62,7 +72,7 @@ public abstract class MeteSaca<T> {
      *         <code>false</code> en otro caso.
      */
     public boolean esVacia() {
-        // Aquí va su código.
+        return this.cabeza == null;
     }
 
     /**
@@ -76,6 +86,14 @@ public abstract class MeteSaca<T> {
         if (object == null || getClass() != object.getClass())
             return false;
         @SuppressWarnings("unchecked") MeteSaca<T> m = (MeteSaca<T>)object;
-        // Aquí va su código.
+        Nodo n = this.cabeza;
+        Nodo c = m.cabeza;
+        while (n != null && c != null) {
+            if (!n.elemento.equals(c.elemento))
+                return false;
+            n = n.siguiente;
+            c = c.siguiente;
+        }
+        return n == null && c == null;
     }
 }
diff --git a/src/main/java/mx/unam/ciencias/edd/Pila.java b/src/main/java/mx/unam/ciencias/edd/Pila.java
index fc800e7..f74fe31 100644
--- a/src/main/java/mx/unam/ciencias/edd/Pila.java
+++ b/src/main/java/mx/unam/ciencias/edd/Pila.java
@@ -10,7 +10,13 @@ public class Pila<T> extends MeteSaca<T> {
      * @return una representación en cadena de la pila.
      */
     @Override public String toString() {
-        // Aquí va su código.
+        String p = "";
+        Nodo n = this.cabeza;
+        while (n != null) {
+            p += String.valueOf(n.elemento) + "\n";
+            n = n.siguiente;
+        }
+        return p;
     }
 
     /**
@@ -20,6 +26,14 @@ public class Pila<T> extends MeteSaca<T> {
      *         <code>null</code>.
      */
     @Override public void mete(T elemento) {
-        // Aquí va su código.
+        if (elemento == null)
+            throw new IllegalArgumentException();
+        Nodo n = new Nodo(elemento);
+        if (cabeza == null)
+            cabeza = rabo = n;
+        else {
+            n.siguiente = cabeza;
+            cabeza = n;
+        }
     }
 }
